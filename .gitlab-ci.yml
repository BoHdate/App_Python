stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2

.check_secrets:
  before_script:
    - echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
    - echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
    - echo "EC2_HOST: $EC2_HOST"
    - echo "ECR_REGISTRY: $ECR_REGISTRY"
    - echo "ECR_REPOSITORY: $ECR_REPOSITORY"
    - echo "SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  extends: .check_secrets
  before_script:
    # Використання AWS CLI Docker контейнера для логіну до ECR
    - docker run --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=eu-north-1 amazon/aws-cli ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    # Перевірка логіну
    - echo "Docker login succeeded"
    # Збірка Docker образу
    - docker build -t $ECR_REPOSITORY:latest .
    # Тегування Docker образу
    - docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
    # Пуш Docker образу до ECR
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  extends: .check_secrets
  before_script:
    # Використання AWS CLI Docker контейнера для логіну до ECR
    - docker run --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=eu-north-1 amazon/aws-cli ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    # Витягування Docker образу
    - docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
    # Запуск контейнера для тестування
    - docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:latest python -c "print('Test Successful')"
    # Додайте тут більше команд для тестування вашого образу
    # Наприклад, ви можете виконати тести вашого додатку всередині контейнера

deploy:
  stage: deploy
  image: alpine:latest
  extends: .check_secrets
  before_script:
    # Встановлення SSH клієнта
    - apk add --no-cache openssh
    # Запуск SSH агента
    - eval $(ssh-agent -s)
    # Обробка приватного SSH ключа
    - echo -e "$SSH_PRIVATE_KEY" > /tmp/ssh_private_key
    - chmod 600 /tmp/ssh_private_key
    - ssh-add /tmp/ssh_private_key
    # Додавання хоста до відомих хостів
    - mkdir -p ~/.ssh
    - ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts
  script:
    # Перевірка з'єднання з сервером
    - ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "echo Connected successfully"
    # Логін до ECR на сервері за допомогою AWS CLI Docker контейнера
    - ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST 'AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION=us-west-2 docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION amazon/aws-cli ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $ECR_REGISTRY'
    # Витягування Docker образу на сервері
    - ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST 'docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest'
    # Оновлення Docker контейнерів за допомогою Docker Compose
    - ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST 'docker-compose up -d'
