stages:
  - check_secrets
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2

.check_secrets:
  stage: check_secrets
  script:
    - echo "Перевірка секретів:"
    - echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
    - echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
    - echo "EC2_HOST: ${EC2_HOST}"
    - echo "ECR_REGISTRY: ${ECR_REGISTRY}"
    - echo "ECR_REPOSITORY: ${ECR_REPOSITORY}"
    - echo "SSH_PRIVATE_KEY: $(echo ${SSH_PRIVATE_KEY} | sed 's/./*/g')"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - |
      echo "Перевірка секретів:"
      echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
      echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
      echo "EC2_HOST: ${EC2_HOST}"
      echo "ECR_REGISTRY: ${ECR_REGISTRY}"
      echo "ECR_REPOSITORY: ${ECR_REPOSITORY}"
      echo "SSH_PRIVATE_KEY: $(echo ${SSH_PRIVATE_KEY} | sed 's/./*/g')"
      docker run --rm -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} -e AWS_DEFAULT_REGION=eu-north-1 amazon/aws-cli ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
  script:
    - echo "Docker login succeeded"
    - docker build -t ${ECR_REPOSITORY}:latest .
    - docker tag ${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
    - docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - |
      echo "Перевірка секретів:"
      echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
      echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
      echo "EC2_HOST: ${EC2_HOST}"
      echo "ECR_REGISTRY: ${ECR_REGISTRY}"
      echo "ECR_REPOSITORY: ${ECR_REPOSITORY}"
      echo "SSH_PRIVATE_KEY: $(echo ${SSH_PRIVATE_KEY} | sed 's/./*/g')"
      docker run --rm -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} -e AWS_DEFAULT_REGION=eu-north-1 amazon/aws-cli ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}
  script:
    - docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
    - docker run --rm ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest python -c "print('Test Successful')"

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - |
      echo "Перевірка секретів:"
      echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
      echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
      echo "EC2_HOST: ${EC2_HOST}"
      echo "ECR_REGISTRY: ${ECR_REGISTRY}"
      echo "ECR_REPOSITORY: ${ECR_REPOSITORY}"
      echo "SSH_PRIVATE_KEY: $(echo ${SSH_PRIVATE_KEY} | sed 's/./*/g')"
      apk add --no-cache openssh
      eval $(ssh-agent -s)
      echo -e "${SSH_PRIVATE_KEY}" > /tmp/ssh_private_key
      chmod 600 /tmp/ssh_private_key
      ssh-add /tmp/ssh_private_key
      mkdir -p ~/.ssh
      ssh-keyscan ${EC2_HOST} >> ~/.ssh/known_hosts
  script:
    - ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} "echo Connected successfully"
    - ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=us-west-2 docker run --rm -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION amazon/aws-cli ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${ECR_REGISTRY}'
    - ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} 'docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest'
    - ssh -o StrictHostKeyChecking=no ubuntu@${EC2_HOST} 'docker-compose up -d'
