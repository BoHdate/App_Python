stages:
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    # Використання AWS CLI Docker контейнера для логіну до ECR
    - docker run --rm -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION=eu-north-1 amazon/aws-cli ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    # Перевірка логіну
    - echo "Docker login succeeded"
    # Збірка Docker образу
    - docker build -t $ECR_REPOSITORY:latest .
    # Тегування Docker образу
    - docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
    # Пуш Docker образу до ECR
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    # Встановлення SSH клієнта
    - apk add --no-cache openssh
    # Обробка приватного SSH ключа
    - echo "$SSH_PRIVATE_KEY" > private_key.pem
    - chmod 600 private_key.pem
    - sudo wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/local/bin/yq
    - sudo chmod +x /usr/local/bin/yq
  script:
    # Підключення до EC2 і виконання команд на сервері
    - ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_HOST "
      aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY &&
      cd App_Py &&
      yq e '.services.web.image = \"$ECR_REGISTRY/$ECR_REPOSITORY:latest\"' -i docker-compose.yml &&
      docker-compose down &&
      docker-compose up -d"
